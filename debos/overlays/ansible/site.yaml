---
- name: Manage secrets on Ansible Controller
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    secrets_file: "{{ playbook_dir }}/neon_hub_secrets.yaml"
    # Config
    users:
      neon_core: {}
      chat_observer: {}
      neon_libretranslate: {}
      neon_api: {}
      neon_coupons: {}
      neon_email: {}
      neon_llm_chatgpt: {}
      neon_llm_fastchat: {}
      neon_metrics: {}
      neon_script_parser: {}
      neon_bot_submind: {}
      neon_llm_submind: {}
      neon_bot_facilitator: {}
      neon_llm_vllm: {}
      neon_users_service: {}
    hana:
      access_token_secret: {}
      refresh_token_secret: {}
      node_pw: {}

  tasks:
    - name: Check if secrets file exists
      stat:
        path: "{{ secrets_file }}"
      register: secrets_stat

    - name: Generate secrets if not exist
      include_tasks: roles/neon_hub/tasks/generate-secrets.yaml
      when: not secrets_stat.stat.exists

- name: Set up Neon Hub
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Hub
    xdg_dir: "{{ xdg_dir | default('/home/neon/xdg') }}"
    common_name: "{{ hostname | default('neon-hub.local') }}"
    install_neon_node: "{{ install_neon_node | default('0') }}"
    install_neon_node_gui: "{{ install_neon_node_gui | default('0') }}"
    browser_package: "{{ browser_package | default('firefox-esr') }}"
    # Docker - this will change rarely
    docker_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    container_count: 4
    docker_edition: "ce"
    docker_packages:
      - "docker-{{ docker_edition }}"
      - "docker-{{ docker_edition }}-cli"
      - "docker-{{ docker_edition }}-rootless-extras"
    docker_packages_state: present
    docker_install_compose: true
    docker_add_repo: true
    # Certificate - this will change rarely
    country: US
    state: Washington
    location: Bellevue
    organization: Neon
    organizational_unit: Neon

  pre_tasks:
    - name: Validate installation options
      fail:
        msg: "Only one installation type can be selected. Set either install_neon_node OR install_neon_node_gui to true, not both."
      when:
        - install_neon_node | bool
        - install_neon_node_gui | bool

    - name: Set primary IP fact for certificate generation
      ansible.builtin.set_fact:
        primary_ip: "{{ ansible_default_ipv4.address }}"

    - name: Check if self-signed certificate already exists
      ansible.builtin.stat:
        path: /home/neon/{{ common_name }}.crt
      register: cert_file

    - name: Debug primary IP
      ansible.builtin.debug:
        msg: "Using primary IP: {{ primary_ip }}"

    - name: Generate self-signed certificate
      become: true
      ansible.builtin.command:
        cmd: >
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 
          -keyout /home/neon/{{ common_name }}.key 
          -out /home/neon/{{ common_name }}.crt 
          -subj "/C={{ country }}/ST={{ state }}/L={{ location }}/O={{ organization }}/OU={{ organizational_unit }}/CN={{ common_name }}"
          -addext "subjectAltName = DNS:{{ common_name }},DNS:*.{{ common_name }},IP:{{ primary_ip }}"
      when: not cert_file.stat.exists
      register: cert_gen_result
      failed_when: cert_gen_result.rc != 0

    - name: Set proper permissions for key and certificate
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        owner: neon
        group: neon
        mode: "0600"
      loop:
        - /home/neon/{{ common_name }}.key
        - /home/neon/{{ common_name }}.crt
      when: not cert_file.stat.exists

  roles:
    - geerlingguy.docker
    - role: neon_hub
    - role: kiosk
      when: install_neon_node_gui | bool
    - role: neon_node
      when: install_neon_node | bool

  post_tasks:
    - name: Create file indicating successful deployment
      ansible.builtin.file:
        path: "{{ xdg_dir }}/neon-installed"
        state: touch
        mode: "2775"

    - name: Ask the user if they want to reboot
      ansible.builtin.pause:
        prompt: "Do you want to reboot the system? Recommended after first installation. (yes/no)"
      register: reboot_answer
      when: not packer_build_name is defined

    - name: Reboot the system if user says yes
      ansible.builtin.command:
        cmd: /sbin/reboot
      when: not packer_build_name is defined and reboot_answer.user_input | lower in ['yes', 'y']
      become: true

    - name: Inform the user that reboot has been triggered
      ansible.builtin.debug:
        msg: "Rebooting the system now, as requested."
      when: not packer_build_name is defined and reboot_answer.user_input | lower in ['yes', 'y']
